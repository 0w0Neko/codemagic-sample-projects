workflows:
    ios-automatic-code-signing:
      name: iOS automatic code signing
      instance_type: mac_pro
      working_directory: ios/ios-automatic-code-signing-demo-project
      environment:
        vars:
          XCODE_WORKSPACE: "swiftly.xcworkspace"
          XCODE_SCHEME: "swiftly"
          BUNDLE_ID: "io.codemagic.cmswiftly"
          # https://docs.codemagic.io/code-signing-yaml/signing-ios/
          APP_STORE_CONNECT_ISSUER_ID: Encrypted(Z0FBQUFBQmd1S0p2TGp6elRIY2thcURYb24zdFE1YzBDSk54OUhmbmMyT3F2aGJoUXU3Z3BZdjJycnJrTFpfaE16VU4tbzFURTBzeXdYc1dfYUR0UEdIZExYeTQwNGlBQUxsVWdYbVdNWlVPOURIaTRRdFdWLXB4QWJGbm9XWS1vX2JwbHhQNTFqU0o=)
          APP_STORE_CONNECT_KEY_IDENTIFIER: Encrypted(Z0FBQUFBQmd1S0tIamJ3UjZMbUJkMXB5eXZfTXItSkdnZVNQNFFjQkdLUFV1THlaYUd5cTBNVkFfdEZSM2p5bHJkZGl5bWZkUVJ5alpFV2s0aERnX2ZxYXVpOTlSbE90SUE9PQ==) 
          APP_STORE_CONNECT_PRIVATE_KEY: Encrypted(Z0FBQUFBQmd1S0tzUFRMV0JEX09MakRJaHk5TVc4NUkwTWNFbmhTWVJGMFlodUZabkFWRG96LTljc3BURTFhQXdEc3U2NDdHNTZaTUFFZk5vZHVnM1ZCTWN2NnhHSFppdHhPeU5TbjRPenZiSGlHQUdsNW1mMXJ5d2V3Yk5ZeWxaeVRrYUY3N2I2cjNYQ19iSFhqOGZCY1JFM0xteER4eUUxS1BNeVJIaDFUN2FabHJfeHFXMExjV2RzanVkT0s2SVh2aTV3TnZWaU01ZFhKZUExT3BsOFpaUWR6Tkh4SkVWaDZyaGp0QjZ0SGo2OEdqTVhrdUJhdnpBVWlTQm1GdUY4NTBxcERKVlJrM1JwMDRGeXRNOHNVMWd0ZHFXVF95SklVVUk4TDBUUWQ3RjktMndqd3NMU0FDQzV4TEM3SmdJYnpISXdqS05Mbl95ekNFcjY5UU04T2g5bEo0T081cGhvYmFVR2diMkMzQmppZUI0UGVycGU4Uk9hX2NURXg0QkhaRWdRT0xzekJTaXJQdGk4b0JSdjdKQm5kY1l3YnRrTTNXdXZnOGpGeW50RkpiQ3RGSGNORT0=)
          CERTIFICATE_PRIVATE_KEY: Encrypted(Z0FBQUFBQmd1TUpCQWM0aEtWTHYwSFdHb0lyTFhlajcxZkV5VkhQWWpkVjFnNG1NVGI4YVFfWEdyd1F6YW1LWjIzeENkVWxjNlhRSnQ5OWNqNmdqNm84d3FmdlhFQUNRNmp4Ym1Sckp1enBfUEpKdmJMOURETFFwdFNoVkhuWl9tdGJBNFFyTGw5RXpQMUVjWjBvNFlHUnVSajl6a2RLNWNUN2tUcnlwcUFtUzEzbXpubnJaQVdHODdGWnpTTDVCRlVTTm9feUIybkpyVm14YzRzV29BSV9PNHRoTW1UUUFmbkNtTURIWEVxeHFCTlNDZU5UNzNaaHlJMk8xWFJ4Nlc3cXNwcU1OZmVVdW5SYWpHVVotNkNYVVFYQVZSZ1B1cE9fd05BNzl3TlphZ3VaQjFocy1TTjBXWXQ4NXJubFd0dmFEMnVlODJYYUJrY3RibllNODJsai1BcENlRFM4TmVtNGczM1ZoM1p1UkRNQ1dLZ29IaC1pdlhQN1R0RnlYc2hvT2ZvSzNLakkwYkJKVjJBX0E4R0F6ZGpmQjhMM081U01TU3ZFc0hKZXBRZThzUWRLYks3REowT2JRd1BYeWJCenRaYU5jZU5GNXBXREpRcVBhc3l2V2JOUUw0VWhJb0xCcGM1b3VMdUJzdUhCVnVxNzhFWkFDbE9EREE2YlV5SWdpM1JWYzBmZFUweXFrLWc2Z2ZOenJLLXc0V1hkekZyOVJPSFBPek5nNUdvYjlROWtiNmZ4V1dLQWF5VHdxM0oxS3JZN083YTNfUDFmWmlFcjRreDJjNFBKelEwcTBYVGJraUJWaVRXZ1lJUm8wZWFmN2RMMzNzQTQ3STU2SkM3MVlkRVNQNXZrUmhMN2c2QnEtSzlFVUxISVBCU05Jc1FFNXhGVHp0cmNjTUhDS0FYX3F0S1B5V0pmZGRGRVFEa09ZMGtWY0hHLXBobXl2UDRrYTAzbEhDRkxBN2xpQUs4eWpWekdfQmZwQ2JDbmgzS0JGY0ZlVkgySWIwUHh2c0JzRnFPYm95c256aTBVRmZuYTZaZ19xSDIyX1dmRGZUTmhjTjlGd1BSWlJHbGZsRDNsM00xUkJRTkhUY0xrOG1sQl9Za1AtdjJpMWMxTEJzUTV0eGdwekxtM1hTNXZFY1NPWDR2RWtSWEFwem80S20zYmZqMnFPQnA4akd4aEtvdk1ZOVBBNTFIWVlYS2t1V3ZESFdvNlNHSUdIUG4zU2lXOEJVNEpNUG9kbHFpVDdMR2FtMTZMSE1KNU9sY0gxLVR2c0JuNFNmdnVxMGNTQnFTbGduaF83Y01pNjdKQ3ZVNERCVDBmb3RURGNIOWlPLWhCbDdoaDExTGRDNlJ3Uk5jaXBKQlBiU2hvZnhfRmZQWUJrcGJ5NnJWZ0ZRTEhYNWVVdlhHOHdMVXZHektLbmNRbWt6T21xUEtEN19KTmpSajFfVS1nUEtlQjBWX0d5NjR0dTJERC1pZ3dSOTlBd01NTmthMmtZc1BHa0pqWG14anRlc1R3NGo5d1I1bnpvdm5GbDdLd2E2TVlhWTVycU1Sd1VJdDFXZUl6Y2czaGFtWmI0ZDVBTUlDM3BKMFlsbmxjVVYycC10YVVHcmV0d00tUmdVTUhLWFB6enEzTDMxUGhtLXFUZ3RmOU5qTk5NV254Mkc3WFJnd3FCakc0bndXR0o3LXBNa0Y0cml0cThBdG4zaV9DdmxiOFgtMzk4Zm15Qi1UNmNHVEZJUVFfOFB6Sk1HTkcwQ05UWVRxcWdRXzh5X21qZ1JBbW43QklVU2JwLUVIa1FOZEF3eHVXaDJRaFhDck5hV25iLTZwdDVuZUhwOGNuUzFnRDJ5OEIyNGlaY1ltQnNIWlBQdXVSMDF1empBYTk2RVdlSVJoU2VYQnFyMGVZbnNmUVZhLXhfQnBwTjVfdm5Wc2xodEdrdWEyXzFCZW5PLWNtSjA2ZU9JZjdJQWxBRmhDcUZpQ0JnZTJxWE1lUHpIRVNLU005S0pZVjZKZERqTmdieHVNQkFmQmhrTlJYVmxERnFPal8waDNRYVZUMkZUTGlDZDVGRDlfUTQ1WXFTOGZOdG5vSUx0YVJtbTRSVjZ6bEJDMVZ3TGlNLTVUNFVGenVUQXBRQlBLbVlsN2lFX3BJMHFDbG1kUUFycUlobGdkbzZVdGVmSl9lRjZfOHZXSEF0dWQ1RERzQTNNbW9xdUZmeXFXMklvdEV1SHhPa1VhX0lsM3NXS3p2WHZFOGdWbXNJZXo5UDc4X1VaWlVwbWN6b3o1R243UTJra1ZMc1RtYXk1SWdVUjFuc1U2aW9nSEl2ZEl1TVdEUnNFWUFXSG14WW50a2hfZk5rSWpsdHdQLXNsUGthZmJtcUNvVk0xeEE4bVZTNDRiME9EM0htUmI5Tzh2Umk5bzlqY2Q4cGl5TmVUMXZEQThhUFBpb3M3ZU92N290bUdHSmNya2VhaFBMZXdYSjcyLWdybmRtOFh2ZVFjeUp0WGpkRlJjX3JfQ05yeWFQYm9SX0ZEWUlzUl9SYmpQcGxyV2N6QXlMMW1sUGNOMURYbjA5bDkwazJCZVdPa3diU0tGS3d5VmtGUE1ZMnJyNEtVS2IxUFU0bG1nRS1ZbWVXTzg0ZUVtemctZVNkU0l4YXcydHU2dlhnZVJYNUtrVDFicjBmRE9RZmZsT21vanNLdWFkMlN3VG9PYXBFYkg2VUNTcGxNQkJ4ZzRlOFUyWk5ZMFNzQVg3ejVlVUtDdkpTak1ldTB1LVJjcy12bUhrSU9hVHNLcFRfVXJscV9PSjFjbmZJZ0RDaW9KY0ZyNnZobGt2UThPMkdaZkhiOHBPTTE3WG4xVExRTThwbk1fenJ6RXlwNUtHV3A4UEhRRF8yRkFZd0ZEQjdrNkVsbFh0cy1sVHlyejZ2YjRvTFpjZ0I3UmRVRXdTMmY1N3ROTFpTWnVZZVhBRjBBQUFMR1BjSUgwMUREVElNem1tOGJBcmZ6OWhFR19IOENRcTBWZHh1NTk0RC1oNkJva1dOekhlakhlanhYeVEwbWtDRHVnYkxMZWZiQkxkaDNXOEhFMlR0YVBPX2pab1FnbWZr)
          APPLE_ID_EMAIL: Encrypted(Z0FBQUFBQmd1S0xRNDBqLVQ1UkJac29IeEVxWjZQRmNRbTQ5U1pFb2cyRlEwUHBSMGtnLWZqc3ktRE5VeHJYRnF0TmJDSjh5MDNGM3dGZnI5ZHQ3MzY3bWN2TGJ3RGVnY0pSUnJpRWY4VkZSRWMzaEl1T25nZzQ9)
          APP_SPECIFIC_PASSWORD: Encrypted(Z0FBQUFBQmd1S01mbTZWTnRqbTc0U2tDeGh1TTZkZjQybHNFeUthT3FvaUx1ZXY4eWVkbkxxV1NuaVJrU2lKT3VMY0VWLThBbnVkVEVwZ0xyVThaU0JJMUxORmxyUXVOcnA3Tm1BQzhUeEpxbVVnS1NpWS01TGM9)
          APP_STORE_APP_ID: 1570610860
        xcode: 12.5
        cocoapods: default
      triggering:
        events:
          - push
          - tag
          - pull_request
        branch_patterns:
          - pattern: 'develop'
            include: true
            source: true
      scripts:
        - name: Install pods
          script: |
            pod install     
        - name: Set up keychain to be used for codesigning using Codemagic CLI 'keychain' command
          script: |
            keychain initialize
        - name: Fetch signing files
          script: |
            app-store-connect fetch-signing-files $BUNDLE_ID --type IOS_APP_STORE --create
        - name: Use system default keychain
          script: |
            keychain add-certificates
        - name: Set up code signing settings on Xcode project
          script: |
            xcode-project use-profiles
        - name: Increment build number
          script: |
            #!/bin/sh
            set -ex
            agvtool new-version -all $(($(app-store-connect get-latest-testflight-build-number "$APP_STORE_APP_ID") + 1))
        - name: Build ipa for distribution
          working_directory: ios/ios-automatic-code-signing-demo-project        
          script: |
            xcode-project build-ipa --workspace "$XCODE_WORKSPACE" --scheme "$XCODE_SCHEME"
      artifacts:
        - build/ios/ipa/*.ipa
        - $HOME/Library/Developer/Xcode/DerivedData/**/Build/**/*.dSYM
      publishing:
        app_store_connect:   # https://docs.codemagic.io/publishing-yaml/distribution              
          apple_id: $APPLE_ID_EMAIL   
          password: $APP_SPECIFIC_PASSWORD
        email:
            recipients:
              - user1@example.com
            notify:
              success: true
              failure: true
        slack:
            channel: '#builds'
            notify_on_build_start: true    # To receive a notification when a build starts
            notify:
              success: false               # To not receive a notification when a build succeeds
              failure: false               # To not receive a notification when a build fails
    ios-manual-code-signing:
      name: iOS manual code signing
      instance_type: mac_pro
      working_directory: ios/ios-manual-code-signing-demo-project      
      environment:
        vars:
          XCODE_WORKSPACE: "swiftly.xcworkspace" # <-- Put the name of your workspace here. 
          XCODE_SCHEME: "swiftly" # <-- Put the name of your scheme here.
          # Set up env vars for manual codesigning (See - https://docs.codemagic.io/code-signing-yaml/signing-ios/)
          CM_CERTIFICATE: Encrypted(Z0FBQUFBQmd3TEk3RGg3TjYzRm80MkdyMEFEbUMzZ2I4UDhwbDU3cVFPYjUzR1U4cFNXZklaY1lZdEhBZUhleklZNzFzaDl6Z2lTM3J2ZnhUY09lQ3JIZmwyQk90Ync1TEt4TkFBLVBGSndkblJRSTRyU01vT2VCSy1FMWtVZkhlSGszbGgyQkNCWmh5VjdwZ25oRVdkN2ZsRkpPYjJ2RV9jT3RnaTF0b2VjWlNuY0RwOGliVHhFLVFOM01ITGRBcHRweXk4ei03VjM2WVp3c0sxMmJFTWdLdlRDaE9tNzJkeWYtYUs4cGp6MEk3RmwyZDRYQ1FoeGJJb2xSUVhiV0VnbC1veG1uVFdicWI3R1d3Ynk0aWVoOWdFZ2JMMHJHVmU2b1IxNEJpSENoNmN1MTZpM2MzTEJyWWFialQ5YjI5a3NYajZ2cHRvYXJDYVlQWFMyTlczdUtva2ViMmEzb1ZmR2c3MmQtcUJyLXZ2QW5vcDNCbzhWdGltdmxaamNIVWVKSGNSMHlldWM0WkVjS09wVHdQMmdNN3dHX1otZTlIazRoRFh3d2FvLUlwWUwwUGV1Z21JRG9ZbFlpUHd4UkpqMm95ZVVHZVR3eTlFODhTMHBxTGY0SXdOQlR1b241eVF5QjhsY2hEZldLSDRkMGV0a0dnOHNsT2FDcEN3YUUxWWdnUG02Rk90SVhQSWVPVk9xV01yRlE4UDhIbHFfVFhVQUFZMHBsOS1vYnAtM243T19Fc3NhWkRPTVhKMDlSRXFtai1ndURnQXBkOVlOS1ZNcTJzZWkyZkpfblN0eEdvYU5CQTdUR2NyejB2QXpKVUoxemxHV2kwOVBHa0hCSnB1QVdRR2ZXOHhiTDNacS1kaUZUYm9MMGZhSU5ILUdqV1ZBUkx3eGxCWDFPZlVIMVVSaDhGWnAzVXhNcHdub3VzZlN3RnQwTF9NakFPNjRuUzMtWnlOVHpoT3VOdFhEX3JEZGZDNzI3Q2RmUmt5eEJJeDBKM216RDkxNkIxbkVkOFQ5enAwU29vM2U2X2J0M1ltc3Y1ZFFiLTl5bDl1WFZ3SFNqcVM1QnRzSWhuRTVFcktIVGFkQ3hDWHJISzYyTVNLVjBweEtqdXF1U09rYk4yVFpfZ281UE81SURmRkE0bnI4VWVNblhBel9vQlJOWEF4ZnQtTGFLM2p4SXdFOEV3VHhXUTVyd1VkZjRiMDRLeTM4Vjd2ckpMSkRSRDVGUmdSVWpxQ3JiN0xDRkZFVXIxWWpjR2ZsUTVWSHR4c3ZTckpXQTdpTnQxTkM0WE1iZGdydXc0MG5kb1BDcktiaVFJQmU3U2FTMmF5UlphMDFzeHliY2JjQnI2Tl9vMnpSRF85RGoxa1lKRFZtS3lmQmdlbFpROUlJaG5TdUNVbWFGRzB6dVR6dkFVRGZ5emxZVGtWSjdUZkhobnZRYy1lMHdwR1ZXRk13T0M5ODZYOG1BZlJOdWV1dmZxUmJzTnZzNDdMTTkwTFhyRXhpQ29nWnB4NWduSk5TTE0xQ3lxWGZJN0d1bWlJejk4b0ZEcklFcnlUSVZoQmVPdnFsbFZIRDJTUkVHRTRrYWRPS19zZjJrZnNDdWpzR2NjVFBUNGpEU0lhRmQ0M25Ldng3aDBfWXg0dm8zaFZvUExKOEx3NXRIU1l3N3VZRmx3YnJ0Q1M0aGhqZDNYeDRKaXlxWXM4UzBFZGJBQlBCZ1pXT3E3ODZuYUg3UkR4SkxlVDlSLTlGX3hGdEY4RjA5QzVTZmJKMXBNd285ZTRQUVVzV2g0MU90blh0bDhlLTVqOWtodWlHWEJIZUZDNWx5bHU5MVVlSjhtV3pHNDRWU0hwMmUxalFQQjltU0EwVURoUUNhcWJZbGV2TnE1OE9lUlRYU0JKSzR4TXF5SlZ0VVUzcDJRTnlaOV9jaWo5VEFXZDhkTzM0UUR2YnpjcVhEOUowVENUcmdCckM1MDJCejF4ekZDVlViUWJaeG96MVdqMFhYbXV4eHp1VVdMRHRfYjBma0l5bXVyRU9MTG5hX3VqX0NJRDh2NkZ2R21SVGRMNUFJY2Fyc2h6ZERJQzJDTjQ0cFNfR1lKdHJ2cnBDa2xBOEpvQjB2OUJUVHJwVm9oWkpYU0xMNGNnQlQydDJubmVwajdlUVlrYUc1bjg2bTdEU2lqVzFYbFk5VmNlN2NsSWFvQktlMjVoc0lFREJKU0xzNU5ZbW5HU3ptTnlQWk9aZFpoTmpoWGZfX2d6TkxjdHdaS3N3c3F2LWtyZkN6ZHRDSWdwa0ZrbkNBc191RTdILVFwekZDUW5VclJQWXIzWFM4QjZNb1FhR2ZHckx5Z2dTX3VtUWVjdm1JX01UN0RZUjRYY2ZzbmcwSTVqVnd3T0d4bl9DTTltTTB2d1BZaUFkT05UZkhqdFVpOVl4RVpXX3BMQmVSTFNHeEdLZHBHc2tfV3dOd1ZWbnp4YWVBMFRPd3FHd1FvcVNBcHZqd2FsMDFRYlp1YXJjX2hxcTdiNWNYQko2MHdhRVRJaE5UeEFvdFF1UXdrQ19mU2hua3RyMzFaLVRHNG1CUTlnODBZcUdOeW5sM1VPM0JULTFsdHNiQlJXTEE3dV9LenExY3F6eGNtZk1KVEpqZkZhN1NKaDl2aWprYU93bWNVc2tVQW42TWZiMnEtWWNocm1xT3piQ3pTNDF5a3FPQS1DdGVYNzZxSmNSSGlMRU9NZVkzZDJJUGVBOU42b0dJbWZ6QnVmYnBhNTc2M3VTc1BJU1dWQnJNQjMxVnBtVWl0RkVBQ0ZqMVB1VzB5aUpYTDFpd3ljcWVYUnNncWluUTdFcHhOcmQ3TlE4NDBYLUJTVjZONDRtaTJORUQ5eThpc1lLaXR1RkpwcGppaVAyUmtHOUNVby1uLThkMWhySlAwQ1ZUSFRCQ1VMMENKc0J5bXE4VTMyNS1mQmJfSXNQQVk1dDl3ZzJPdGVoMHNRZV9XeVZxcFJNakNHcGJlWkc2QWhRVTZWMVZpZjVBM2ZhXzlDUmRzczlUVmNnY0ZycVptLXFxVkpYWW14WklsTlNuczMyc2ZkakFsOFg0TU1WU1VwZ0FSOVJUd1k0ZVk0blBDS0diaDZoNF9Xa3UxM0p0bkFJbWV4dkc4YjhhZUd6SGZrVWlaVkdGb2NKa0ZwRVk1YzNVWTJxMG4xVDc4SzBQS1BNRXlnTFpqblFVaUtYYVBmYWJ5Sy1WbkQtck52RWtkbzNzUjJIMnoyQWtLaVh3REFIN2tfeWJCbDdWb0F6MmlMeFVjcHgzSEMwMWwxWEFVay1DS0NsUmxZakdKUzRmdFFKYjRleVBXMGNEeUl2TTkyMDF1ZjhoRnhwRFBhMURDNHAyVmFNRDd4clBnRFBkTkQ0MHd1WV9Wdjl4OElkZkJZMkNBcmxwa3l4bkhmV1M5aGhtQ2FWMVo4ak1najl1Wjg1LXpoNDh2YTZEYllHdE1TbXpuel82eWpsVkRlbDM1amtscGZJQTQ3RGo4NXkxR3FYZ2ZaY0FrcmlQcS1jbkhrY2dVZXBQdVJUNnNsSGlia0ozM1R5d1F5VEFVSTJ6UWNaUzMzalpPMldxZUo3ZWoxVlZidndPUWs1YmFRUmdnVnBXbVQ1dzZXNzdzelNLVkxDZ1YwWlNlR1I1ZzI4ZFQxa25KaDhVTmhDazExQlVFQWxQZ29NaGJXd1J6MklpVFhrSnR5N0NvT3luM3p4dWo4TzhndDRuYl9JaENoNFNweGswVGNfX1JxaDJxaElXcFQwUDJxaW1DR2JZYUtBemkwVkhQc3lTU2lzNlhJX3IyS3ZIN1lBV21lMlkycV9lTF8xVFpuNFh2NFVWajlVaThKTXNmcGdYRHhFdmtPNXJDZUdycEwtWXNVdmxzT3d2S2dTMTdBZ3lucGxfQnVJTGV1WGwyem1TaXQ0QWl1b3FDMFNXZ040WmtHTnpKLTlzbWl5aHJwZG5MR1NKT3V1Q3VMcDl0M1ppZGRtVlRuN2RsQjN5cGc1N1loTGJXQ0ZrbFlNQnVBZHBkT3k0M1Z6RzlZS1lzRDhRNjNWcDR6eHBBT2dadFNVYUp3cFF1SnlsVS04Uk1sZVQ5YURNUXMySi1PZ200aVhERDR3XzFNY3JaSzFzZ1U2djk5TDhVVlRUeU9DeGp1cDJfN3VYdE1PMUdybkR4SHFGTWJzTHliaW5VNE1JVFBPaC1JU2NiZm5IeXZtTUphclF0Y2o1TnNOTTBYc3BGeXVTOGRpWFNmT29jNFJuRU8tdFNKenY1VlBhNnV2RjFMcHhROVRoZFh6aTh4Y2lOYnBlalFjU3ZRVXI5ZVNTNVZqYkdyT2FDUUp5a1dYU3gza2RpTXlRVFNSSkNlVDhoQXM5ejV6NjJJdk13ZnZxUFpySDhTVUw0OTNTRVcyem1QR3Q4azJ6YXhZUEY2b0JrQmQ1QmxweXNIMU1DY3prVXU5YzdfNnJKTG96LUtsdVI4Z3BOUUlKREMwUnVjWW00N00yek1zam1yNEx3c2ttMFlUVGpjeG1jTW16RFJObE1LWXdqX1RjQ01YaFZLaWprVEd6TUx5cjZDczBHSldWcHEyaUpkSVhjR2hCek1CYjRFRFBpOUp6UEVKYUhDYTZ2S1UwcVRrZ29WeHFwZ2ZQS09ldXRleWU3aEJXNmZha2xCV2FlVmRuMUtyWWpPTjVuMVhrZDVoMkFZMkxxdzNoNlpwZklwaDZ0dmJRY2JERXVqa1YwTGNTZFp1aUR1WWdMYUtCUVV4eFFtSmVWWFFDd1Q1R1d0czVkcW1Jajd6UVpkNHJqQ09QZFhMc2Q3b0V3RTZkZWU1QWRveG9VNGRGLUJGU2x0LWpvWWxyWHljRWZkVEhOYUdJQWRkSFphRFdTUHRldkhpTWx2RVRBREpKcTQyUmROY2xRcFlrUmRYVFJTY0pKXzNGdENYVHVZZ2RHVVo3VjkyN0NvY3JJc3F0VWFuUVNxeGZFUVhxMkVXTS12aldoUFpJZmI2TGFkNDRiRnVHOS0yY1NKUWdlN0RMV3UyYjNBR2s0RnJubjVnVWgxUy1DQVpuZFZfWDBidG9idTRMSF9JSWFLU09QZXNIZ1hNQjNlTGd6RnA5R2ZXS3htVTNjcm5HMEdaMmw2cTRUOGtSZTZGZ2xlcnZqMlczakNUakhldHh2OHBVX25nSEIwYXVUNkxvOE1KcUtWa3A3MkRvb3FUV2NOb2VZLTNMVjRILWhDQ0l2ZFBDMHF4OF9jZmQtQVM3a2xabjVuUk1JTWV6T3NmZGsxM0daa1ZXYVFNQXluczlINkpGMzdaRjk1WXBCUEp3THlVQmwwaFdXc1Z5RXR1Ukl3anVhX3JkTkpDWlRUX2l2N3RIWDVXODNzZzY1WFlZc2stQmVOSzJxaEQ1TG4yMU5tblQ1Q3ExNUowN0FSeTR2a2VUTHVRYXpEMS1XOEoydEo4NHAxZDJvOTFTWEkxWDNDT3d6WmN3Mmk1UnJoblJiNTE5WWw1RjlTa2l0ZE1Iekluc0V3TFpOa3Y0djQ1d2ZIdzRrazRXYjN2MTdKTWFFR1hUcHZOdEx1MFBwQWxuWVM4Nm93VnVickw2d1lVU2MyUVNzQURQQURRZF8tTTZGRkRoMkI3T2Jybk9KVUZtc3RsWnh3VW5yT0dqT2otRjFrOGdoUEw2aWlGWnF3VDhyWVVZNTRKYWlwdzhOSTREYUNwWjZZZ2lsYnlfX1p4OE9UdlNBV3hHQnZqMU01bEpVMnF3UlI2cE5feHB5R25ySDhPZHUtbzdDd3RwMVRYbXpETXB5dFU2S1BzYWNIMzdBZGhoVVdKUmlhdnEzSGdBSURCa0hON1RWUENZOWN2OFNlbVR3TE1HdFhiSEFMeTFvN1dCbXctaXN0MUJjNUN6bTV4WTBRNWRmMEpnV3EwUmJ3LWRiZElCN1czcC1oeEZubGx6d3gwYlAwRXYzb0tHNnl3MGQzbEV0dy13VkVzWnlPRGFGQTZsb0Uyak9vZXk0RWZrTEttaGtuTXdET0M0UFUwaGxneHlncEtiWmdGcHJTbXFxOXVNX1JDaDN2NHhMSEF0ME1pdTN0ZV96Y0xvQzNTYUo3dFdtM1prU1ZPcjdxUFR3cHZnQUhGelhRZFBMeWpabUZPbk12NmR0YlJrbXRleklXRTliUlZoWE5yV0hWSWxMN1I4UHlyUlZ6NW83czVOZkR1YjBaQ0EteS1FWVc3c3RVU3hTeUYtekVoMFgzZlJjQnpqdlBPazB6N3hXd1R3NmlQQXJVY2RVQVUxRmsyV1p4ZFRYSk5HM05aVW15YkZZUGhfTE4wb2RDM1ZZUE1oVjhYVHFqaGFYblVXOHVicXdpeUk1eExwTkttZzJBRERCNXBNTFpEUlRiMlF0eVRqeUt1Zkw0SlRMc0p6NEVIX2ZuM0NEZkhkX212dXpubnM2WW9ZMkYyaWVWSXYwemFGYnAzS2lDVldPNEl6WjljMHJXblhaN2ppYVk2MndJZG8zMlpfaVR5Mnlsa3NnYjloSGZ4UFlCWHJZS3lzdncyTVdVeW1yZTNib21FQld2UWZfWkxqX1JicW15Um1PNkIxU3JBVnJMU19NMjc1aFJ6OW43UjZ3ZzV0ci1vbmsxVjRnVVpoaFdlNF92YVVTRXVvYlN5cURpNmV4Z1BNQzBIaGtjckV3VEhLVHh3SURob1ZIWTdBSWIxVGNLYkF6YUJGZUJTMTFRa2F2Nkh6ZHJETWd5QzBUZmh3NUhpLWlXd0FzRWlubEZrdWtwOTZYVHh2UE1XX2xlTmlsNnNNdnNMVTJRYWpyZGtFZVBzQjN1VjRrX3BPQ3hpbFlHV3kyRGMtLUs2RmR2YXlwTnRHMlhwaXBzVW1zcEMtLVVzVzlRVGljQ3doTkVmeFFpaGRBYmZrYlVrZUhMblpGSUgwWDRVNHluU05aNlBRc0JXZXNlUG5uc2tQSGk4MEF3NUx2ZGhOZ0dMZmFzZDk4NGJ5amdzVE1pM2N2VzRVRnpCUDh5QU5qQjZoYkNvWmh6ZnI0MUtTODJoSEZjWXBzSVJvbnJVa0taR0Y3c21YZGVxQ1hhUmp0NjRJVVBmYXVzWmUxOFo3R0JlY0dYLWxwVjZYcVpkV2FrRllGRDRzbjJDdWVlLTNyMG9wMFBUVWpiZnNaTzVHdnpoTUhQMWFYMFR5cnBxSmVwWXZWd2NXYmRzOG1WLWdmcEV5Z0pYbjI1S3JRQlFwaXRlZGJqVkZfdnFxN0tuekFYS2JFX2dKYTVWZjdiYmRueUhlSkcyTVBjbFQ5bG1GcDBmV2lib1MxUDlpdWdyVWxobnNWSHhMYmp6NFYtSGFQVkpPMGhFcnBDWVM4Xy1lSWFNaE1Hb1pPc0xkbnY0UDZjcFlvS19scFlBeEZ0YzI4aE0wd184eWZSMmRHZHkwSHdSeElaNFZOXzhleXRYVlhtSW5WcFlCOXdfVEQxakN0NEpsRHdYUTdUN0lxLUJDWWtSZmhqVldLUGFpejRsaGVWQkJYbzdwRVhpbUdfOVRIQno3ekVRQ1FCZXVWQ0VnenZiZlo4a1dBbDdJU2xrVlEydEV0bUJZUFNSanZVc1VUN1Q1ek05ZU5KUW5oYUNYclRvQWpEanlLS0ZROW1DSmg0NjdYaHo4aks1TXJ5QkY4VGVXM2MweU1HODVPM3VXOU9zazE5T3hNendxSllNTjZEVEZmUzEzT1pneWJ6ZzhZa01UN2QxUU5rZ3pKQXBBVnRFVFo4bms5Vk5oZGNVdG5vTT0=)
          CM_PROVISIONING_PROFILE: Encrypted()
          APPLE_ID_EMAIL: Encrypted(Z0FBQUFBQmd1S0xRNDBqLVQ1UkJac29IeEVxWjZQRmNRbTQ5U1pFb2cyRlEwUHBSMGtnLWZqc3ktRE5VeHJYRnF0TmJDSjh5MDNGM3dGZnI5ZHQ3MzY3bWN2TGJ3RGVnY0pSUnJpRWY4VkZSRWMzaEl1T25nZzQ9)
          APP_SPECIFIC_PASSWORD: Encrypted(Z0FBQUFBQmd1S01mbTZWTnRqbTc0U2tDeGh1TTZkZjQybHNFeUthT3FvaUx1ZXY4eWVkbkxxV1NuaVJrU2lKT3VMY0VWLThBbnVkVEVwZ0xyVThaU0JJMUxORmxyUXVOcnA3Tm1BQzhUeEpxbVVnS1NpWS01TGM9)
          APP_STORE_APP_ID: 1571469558
        xcode: latest
        cocoapods: default
      triggering:
        events:
          - push
          - tag
          - pull_request
        branch_patterns:
          - pattern: 'develop'
            include: true
            source: true
      scripts:
        - name: Install pods
          script: |
            pod install        
        - name: Initialize keychain to be used for codesigning using Codemagic CLI 'keychain' command
          script: |
            keychain initialize
        - name: set up provisioning profiles
          script: |
            PROFILES_HOME="$HOME/Library/MobileDevice/Provisioning Profiles"
            mkdir -p "$PROFILES_HOME"
            PROFILE_PATH="$(mktemp "$PROFILES_HOME"/$(uuidgen).mobileprovision)"
            echo ${CM_PROVISIONING_PROFILE} | base64 --decode > "$PROFILE_PATH"
            echo "Saved provisioning profile $PROFILE_PATH"
        - name: Add signing certificate to keychain
          script: |
            echo $CM_CERTIFICATE | base64 --decode > /tmp/certificate.p12
            keychain add-certificates --certificate /tmp/certificate.p12
        - name: Increment build number
          script: |
            # increment build number
            #!/bin/sh
            set -e
            set -x
            cd $FCI_BUILD_DIR
            agvtool new-version -all $(($BUILD_NUMBER +1))
        - name: Set up code signing settings on Xcode project
          script: |
            xcode-project use-profiles
        - name: Build .ipa
          script: |
            xcode-project build-ipa --workspace "$XCODE_WORKSPACE" --scheme "$XCODE_SCHEME"
      artifacts:
        - build/ios/ipa/*.ipa
        - $HOME/Library/Developer/Xcode/DerivedData/**/Build/**/*.dSYM
      publishing:
        email:
            recipients:
              - user1@example.com
            notify:
              success: true
              failure: true
        app_store_connect:                 
            apple_id: $APPLE_ID_EMAIL
            password: $APP_SPECIFIC_PASSWORD